// 키 바인딩을 이 파일에 넣어서 기본값 재정의

[
  {
    "key": "ctrl+m",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  {
    "key": "ctrl+j",
    "command": "list.focusDown",
    "when": "sideBarFocus"
  },
  {
    "key": "ctrl+k",
    "command": "list.focusUp",
    "when": "sideBarFocus"
  },
  {
    "key": "ctrl+h",
    "command": "list.collapse",
    "when": "sideBarFocus"
  },
  {
    "key": "ctrl+x",
    "command": "list.collapseAll",
    "when": "sideBarFocus"
  },
  {
    "key": "ctrl+l",
    "command": "list.expand",
    "when": "sideBarFocus"
  },
  {
    "key": "ctrl+s ctrl+s",
    "command": "workbench.action.openSettingsJson"
  },
  {
    "key": "ctrl+s ctrl+k",
    "command": "workbench.action.openGlobalKeybindingsFile"
  },
  {
    "key": "ctrl+;",
    "command": "terminal.focus"
  },
  {
    "key": "ctrl+;",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "terminalFocus"
  },
  {
    "key": "cmd+n",
    "command": "explorer.newFile",
    "when": "sideBarFocus"
  },
  {
    "key": "cmd+shift+n",
    "command": "explorer.newFolder",
    "when": "sideBarFocus"
  },
  {
    "key": "cmd+ctrl+s",
    "command": "projectManager.saveProject"
  },
  {
    "key": "cmd+ctrl+p",
    "command": "projectManager.listProjectsNewWindow"
  },
  {
    "key": "tab",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions"
  },
  {
    "key": "shift+tab",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions"
  },
  {
    "key": "ctrl+m",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+p",
    "command": "-workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  {
    "key": "ctrl+m",
    "command": "cursorUp",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+p",
    "command": "-cursorUp",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+m",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+p",
    "command": "-list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+m",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+p",
    "command": "-selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "ctrl+m",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+p",
    "command": "-selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+m",
    "command": "showPrevParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+p",
    "command": "-showPrevParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+g ctrl+g",
    "command": "git-graph.view"
  },
  {
    "key": "ctrl+l ctrl+l",
    "command": "extension.multiCommand.execute",
    "args": {
      "command": "startLazygit" 
    },
  },
  {
    "key": "ctrl+l ctrl+k",
    "command": "extension.multiCommand.execute",
    "args": {
      "command": "killMaximizedPanelTerminalSession"
    }
  },
  {
    "key": "ctrl+cmd+b",
    "command": "editor.debug.action.toggleBreakpoint",
    "when": "debuggersAvailable && editorTextFocus"
  },
  {
    "key": "f9",
    "command": "-editor.debug.action.toggleBreakpoint",
    "when": "debuggersAvailable && editorTextFocus"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.terminal.kill"
  },
  {
    "key": "tab",
    "command": "-insertSnippet",
    "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
  },
  {
    "key": "escape",
    "command": "-modaledit.enterNormal",
    "when": "editorTextFocus && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
  },
  {
    "key": "insert",
    "command": "modaledit.toggle"
  },
  {
    "key": "backspace",
    "command": "-modaledit.deleteCharFromSearch",
    "when": "editorTextFocus && modaledit.searching"
  },
  {
    "key": "escape",
    "command": "-modaledit.cancelSearch",
    "when": "editorTextFocus && modaledit.searching"
  },
  {
    "key": "alt+cmd+[",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "key": "shift+cmd+[",
    "command": "-workbench.action.terminal.focusPrevious",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "key": "alt+cmd+]",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "key": "shift+cmd+]",
    "command": "-workbench.action.terminal.focusNext",
    "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
  },
  {
    "key": "shift+cmd+r",
    "command": "editor.action.goToReferences",
    "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "key": "shift+f12",
    "command": "-editor.action.goToReferences",
    "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+h",
    "command": "editor.action.showHover",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+k cmd+i",
    "command": "-editor.action.showHover",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+f12",
    "command": "-editor.action.peekDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+shift+d",
    "command": "editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "f12",
    "command": "-editor.action.revealDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+d",
    "command": "editor.action.showDefinitionPreviewHover"
  },
  {
    "key": "ctrl+p ctrl+t",
    "command": "editor.action.peekTypeDefinition"
  },
  {
    "key": "ctrl+p ctrl+d",
    "command": "editor.action.peekDefinition"
  },
  {
    "key": "shift+cmd+space",
    "command": "-editor.action.triggerParameterHints",
    "when": "editorHasSignatureHelpProvider && editorTextFocus"
  },
  {
    "key": "ctrl+p ctrl+i",
    "command": "editor.action.peekImplementation",
    "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+p ctrl+c",
    "command": "editor.action.peekDeclaration"
  },
  {
    "key": "ctrl+j",
    "command": "cursorDown",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+k",
    "command": "cursorUp",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+h",
    "command": "cursorLeft",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+l",
    "command": "cursorRight",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+j",
    "command": "list.focusDown",
    "when": "sideBarFocus"
  },
  {
    "key": "ctrl+k",
    "command": "list.focusUp",
    "when": "sideBarFocus"
  },
  {
    "key": "cmd+m cmd+i",
    "command": "-editor.emmet.action.balanceIn",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+m cmd+o",
    "command": "-editor.emmet.action.balanceOut",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+m cmd+down",
    "command": "-editor.emmet.action.decrementNumberByOne"
  },
  {
    "key": "cmd+m cmd+=",
    "command": "-editor.emmet.action.evaluateMathExpression",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+m cmd+m",
    "command": "-editor.emmet.action.matchTag",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+m cmd+k",
    "command": "-editor.emmet.action.nextEditPoint",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+m cmd+j",
    "command": "-editor.emmet.action.prevEditPoint",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+m cmd+up",
    "command": "-editor.emmet.action.incrementNumberByOne"
  },
  {
    "key": "cmd+m shift+cmd+m",
    "command": "-editor.emmet.action.mergeLines",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+m cmd+r",
    "command": "-editor.emmet.action.reflectCSSValue",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+m cmd+backspace",
    "command": "-editor.emmet.action.removeTag",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+m cmd+.",
    "command": "-editor.emmet.action.selectNextItem",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+m cmd+,",
    "command": "-editor.emmet.action.selectPrevItem",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+m cmd+s",
    "command": "-editor.emmet.action.splitJoinTag",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+m cmd+/",
    "command": "-editor.emmet.action.toggleComment",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+m cmd+u",
    "command": "-editor.emmet.action.updateImageSize",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+m cmd+t",
    "command": "-editor.emmet.action.updateTag",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+m cmd+w",
    "command": "-editor.emmet.action.wrapWithAbbreviation",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+m",
    "command": "-markdown.extension.editing.toggleMath",
    "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"
  },
  {
    "key": "cmd+m cmd+c",
    "command": "-workbench.action.showEmmetCommands",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+m cmd+l",
    "command": "-editor.emmet.action.wrapIndividualLinesWithAbbreviation",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+enter",
    "command": "editor.action.insertLineBefore",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+cmd+enter",
    "command": "-editor.action.insertLineBefore",
    "when": "editorTextFocus && !editorReadonly"
  }
]
